---
title: "vow-height"
---

## Attach packages

```{r}
#| label: packages
#| message: false

library(tidyverse)
theme_set(theme_light())
library(magrittr)
library(coretta2018itaegg)
library(brms)
library(tidybayes)
library(marginaleffects)
library(ggdist)
library(mgcv)
library(tidygam)
```

## Read data

```{r}
#| label: read-data

data("formants")

formants %<>% mutate(
  duration = duration * 1000,
  vowel = as.factor(label),
  duration_z = as.vector(scale(duration)),
  duration_log = log(duration),
  duration_logz = as.vector(scale(log(duration))),
  f13_z = as.vector(scale(f13)),
  f23_z = as.vector(scale(f23)),
  speaker = as.factor(speaker)
)
contrasts(formants$vowel) <- "contr.sum"
```

## Plotting

```{r}
#| label: vowel-plot

formants %>%
  group_by(speaker) %>%
  mutate(
    f13_speaker_z = as.vector(scale(f13)),
    f23_speaker_z = as.vector(scale(f23))
  ) %>%
  ggplot(aes(f23_speaker_z, f13_speaker_z, colour = vowel)) +
  geom_point(alpha = 0.2) +
  stat_ellipse(type = "norm") +
  scale_x_reverse(position = "top") + scale_y_reverse(position = "right") +
  coord_fixed()
```

```{r}
#| label: vowel-plot

formants %>%
  group_by(speaker) %>%
  mutate(
    f13_speaker_z = as.vector(scale(f13)),
    f23_speaker_z = as.vector(scale(f23))
  ) %>%
  ggplot(aes(f23_speaker_z, f13_speaker_z)) +
  geom_point(aes(colour = duration), alpha = 0.8) +
  stat_ellipse(aes(group = vowel), type = "norm") +
  scale_x_reverse(position = "top") + scale_y_reverse(position = "right") +
  coord_fixed()
```

```{r}
#| label: dur-f1-dens

formants %>%
  ggplot(aes(f13_z, duration_z)) +
  geom_density_2d_filled()
```


```{r}
#| label: dur-f1

formants %>%
  ggplot(aes(f13_z, duration_z, colour = vowel)) +
  geom_point(alpha = 0.2) +
  geom_smooth(method = "lm", formula = y ~ x)
```

## Linear modelling

### Prior predictive checks

The outcome `duration_logz` and predictor `f13_z` are z-scored and `vowel` is sum coded so that `Intercept` is the grand mean.

I am using relatively weakly informative priors.

```{r}
#| label: prior-check

priors <- c(
  prior(normal(0, 1), class = Intercept),
  prior(normal(0, 1), class = b),
  prior(cauchy(0, 0.1), class = sigma),
  prior(lkj(2), class = cor),
  prior(cauchy(0, 0.1), class = sd)
)

bm_1_priors <- brm(
  duration_logz ~
    vowel * f13_z +
    (vowel * f13_z | speaker),
  family = gaussian,
  data = formants,
  prior = priors,
  cores = 4,
  threads = threading(2),
  backend = "cmdstanr",
  sample_prior = "only",
  file = "data/cache/bm_1_priors",
)
```

```{r}
#| label: prior-plot

conditional_effects(bm_1_priors, "f13_z:vowel")
conditional_effects(bm_1_priors, "vowel")
```


### Model fit

```{r}
#| label: bm-1

bm_1 <- brm(
  duration_logz ~
    vowel * f13_z +
    (vowel * f13_z | speaker),
  family = gaussian,
  data = formants,
  prior = priors,
  cores = 4,
  threads = threading(2),
  backend = "cmdstanr",
  file = "data/cache/bm_1",
)
```

```{r}
#| label: bm-1-fixef
fixef(bm_1, probs = c(0.05, 0.95))
```

Let's get the estimated effect of vowel quality for /u/.

```{r}
#| label: bm-1-draws

bm_1_draws <- as_draws_df(bm_1) %>%
  mutate(
    vowel5 = b_Intercept - b_vowel1 - b_vowel2 - b_vowel3 - b_vowel4,
    b_vowel5 = vowel5 - b_Intercept
  )

quantile(bm_1_draws$b_vowel5, probs = c(0.05, 0.95))
```

```{r}
#| label: bm-1-cond

conditional_effects(bm_1, "f13_z:vowel", prob = 0.9)
conditional_effects(bm_1, "f13_z:vowel", spaghetti = TRUE, ndraws = 100, prob = 0.9)
```


```{r}
#| label: bm-1-comp

avg_comparisons(bm_1, variables = "f13_z", conf_level = 0.9)
avg_comparisons(bm_1, variables = "f13_z", by = "vowel", conf_level = 0.9)
```

```{r}
#| label: bm-1-comp

avg_predictions(bm_1, by = "vowel", conf_level = 0.9) %>%
  as_tibble() %>%
  mutate_if(
    is.numeric, function (x) {exp(x * sd(formants$duration_log) + mean(formants$duration_log))}
  )
```


We need to get the predicted draws to convert duration and F1 back to ms and hz. Note that duration was logged then scaled.

```{r}
#| label: bm-1-preds

seq_minmax <- function(x, by = 1) {
  seq(min(x), max(x), by = by)
}

bm_1_grid <- expand_grid(
  vowel = levels(formants$vowel),
  f13_z = seq_minmax(formants$f13_z, 0.5)
)

bm_1_preds <- epred_draws(bm_1, newdata = bm_1_grid, re_formula = NA) %>%
  mutate(
    duration_log = .epred * sd(formants$duration_log) + mean(formants$duration_log),
    duration = exp(duration_log),
    f13 = f13_z * sd(formants$f13) + mean(formants$f13)
  )
```

Let's also calculate the mean F1 values for each vowel, to be added in the plot below.

```{r}
#| label: vmean

vmean_f13 <- formants %>%
  group_by(vowel) %>%
  summarise(f13_mean = mean(f13))
vmean_f13z <- formants %>%
  group_by(vowel) %>%
  summarise(f13z_mean = mean(f13_z))
```


We can now plot the model predictions in the original scale.

```{r}
#| label: bm1-pred-plot-1

bm_1_preds %>%
  group_by(vowel, f13) %>%
  summarise(
    duration_ms = median(duration),
    # Get the 90% CrI
    q0.05 = quantile(duration, probs = 0.05),
    q0.90 = quantile(duration, probs = 0.95),
    .groups = "drop"
  ) %>%
  ggplot(aes(f13, duration_ms)) +
  geom_ribbon(aes(ymin = q0.05, ymax = q0.90, fill = vowel), alpha = 0.25) +
  geom_line(aes(colour = vowel), linewidth = 1) +
  facet_wrap(~vowel) +
  scale_colour_viridis_d() +
  scale_fill_viridis_d()
```

```{r}
#| label: bm1-pred-plot-2

bm_1_preds %>%
  group_by(vowel, f13) %>%
  ggplot(aes(f13, duration)) +
  stat_lineribbon() +
  facet_wrap(~vowel) +
  scale_fill_brewer()
```

```{r}
#| label: bm1-pred-plot-ms-hz

bm_1_preds %>%
  group_by(vowel, f13) %>%
  ggplot(aes(f13, duration, fill = vowel)) +
  stat_ribbon(.width = 0.98, alpha = 0.2) +
  stat_ribbon(.width = 0.9, alpha = 0.4) +
  stat_lineribbon(.width = 0.6, alpha = 0.8) +
  geom_vline(data = vmean_f13, aes(xintercept = f13_mean, colour = vowel), linetype = "dashed") +
  geom_rug(data = formants, alpha = 0.1, length = unit(0.015, "npc"), aes(colour = vowel)) +
  facet_wrap(~vowel) +
  labs(
    x = "F1 (Hz)", y = "Duration (ms)"
  ) +
  scale_fill_viridis_d() +
  scale_colour_viridis_d() +
  theme(legend.position = "none")
```

But let's also plot this in the standardised logged duration scale.

```{r}
#| label: bm1-pred-plot-4

bm_1_preds %>%
  group_by(vowel, f13) %>%
  ggplot(aes(f13_z, .epred, fill = vowel)) +
  stat_ribbon(.width = 0.98, alpha = 0.2) +
  stat_ribbon(.width = 0.9, alpha = 0.4) +
  stat_lineribbon(.width = 0.6, alpha = 0.8) +
  geom_vline(data = vmean_f13z, aes(xintercept = f13z_mean, colour = vowel)) +
  facet_wrap(~vowel) +
  scale_fill_viridis_d()
```
```{r}
#| label: bm-1-ranef

bm_1_ranef <- bm_1 %>%
  spread_draws(b_Intercept, r_speaker[subject,var]) %>%
  mutate(condition_mean = b_Intercept + r_speaker)
```

```{r}
#| label: bm-1-ranef-f13-z

bm_1_ranef %>%
  filter(var == "f13_z") %>%
  ggplot(aes(y = reorder(subject, r_speaker, median), x = r_speaker)) +
  stat_halfeye()
```


## Non-linear modelling

### F1

```{r}
#| label: gam-1

gam_1 <- bam(
  duration_logz ~
    vowel +
    s(f13_z) +
    s(f13_z, speaker, by = vowel, bs = "fs", m = 1),
  data = formants
)
```

```{r}
#| label: gam-1-summ

summary(gam_1)
```


```{r}
#| label: gam-1-plot

vmean <- aggregate(formants$f13_z, list(formants$vowel), mean)
# fs_terms <- c("s(f13_z,speaker)")
fs_terms <- c("s(f13_z,speaker):vowela", "s(f13_z,speaker):vowele", "s(f13_z,speaker):voweli", "s(f13_z,speaker):vowelo", "s(f13_z,speaker):vowelu")

predict_gam(gam_1, exclude_terms = fs_terms, length_out = 100) %>%
  plot(series = "f13_z", comparison = "vowel") +
  geom_vline(data = vmean, aes(xintercept = x, colour = Group.1)) +
  geom_hline(yintercept = 0, linetype = "dashed") +
  facet_wrap(~vowel)
```

### BRM

```{r}
#| label: bms-1-priors

priors_s <- c(
  prior(normal(0, 1), class = Intercept),
  prior(normal(0, 1), class = b),
  prior(cauchy(0, 0.1), class = sigma),
  prior(cauchy(0, 0.1), class = sds)
)

bms_1 <- brm(
  duration_logz ~
    vowel +
    s(f13_z) +
    s(f13_z, speaker, by = vowel, bs = "fs", m = 1),
  family = gaussian,
  data = formants,
  prior = priors_s,
  sample_prior = "only",
  cores = 4,
  threads = threading(2),
  backend = "cmdstanr",
  file = "data/cache/bms_1_priors",
)
```

```{r}
#| label: bms-1-priors-plot

conditional_effects(bms_1, "f13_z:vowel")
conditional_effects(bms_1, "f13_z:vowel", spaghetti = TRUE, ndraws = 100)
```

We specify `k = 5` based on the mgcv modelling above. Reducing `k` speeds up estimation (because there are less basis functions, hence less parameters to estimate).


```{r}
#| label: bms-1

bms_1 <- brm(
  duration_logz ~
    vowel +
    s(f13_z, k = 5) +
    s(f13_z, speaker, by = vowel, k = 5, bs = "fs", m = 1),
  family = gaussian,
  data = formants,
  prior = priors_s,
  cores = 4,
  threads = threading(2),
  backend = "cmdstanr",
  file = "data/cache/bms_1"
)
```

```{r}
#| label: bms-1-plot

plot(conditional_effects(bms_1, "f13_z:vowel"), plot = FALSE)[[1]] + facet_wrap(~vowel)
plot(conditional_effects(bms_1, "f13_z:vowel", spaghetti = TRUE, ndraws = 100), plot = FALSE)[[1]] + facet_wrap(~vowel)
```

### F1 and F2

```{r}
#| label: gam-2

gam_2 <- bam(
  duration_logz ~
    vowel +
    s(f13_z, f23_z) +
    s(f13_z, f23_z, speaker, bs = "fs", m = 1),
  data = formants
)
```

```{r}
#| label: gam-2-summ

summary(gam_2)
```

```{r}
#| label: gam-2-pred

gam_2_preds <- predict_gam(gam_2, length_out = 50, exclude_terms = "s(f13_z,f23_z,speaker)")
```

```{r}
#| label: gam-2-plot

vmeans <- formants %>%
  group_by(vowel) %>%
  summarise(
    f13_z = mean(f13_z), f23_z = mean(f23_z)
  )

gam_2_preds %>%
  ggplot(aes(f23_z, f13_z)) +
  geom_raster(aes(fill = duration_logz), interpolate = TRUE) +
  geom_contour(aes(z = duration_logz), bins = 40, colour = "white", linewidth = 0.05) +
  geom_label(data = vmeans, aes(label = vowel), size = 5) +
  scale_x_reverse(position = "top") +
  scale_y_reverse(position = "right") +
  scale_fill_distiller(palette = "BuPu")
```


