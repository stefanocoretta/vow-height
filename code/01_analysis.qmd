---
title: "Analysis of intrinsic vowel duration in Northwestern Italian"
author: "Stefano Coretta"
date: today
execute: 
  cache: true
format:
  html: default
  pdf: default
---

## Attach packages

```{r}
#| label: packages
#| message: false

library(tidyverse)
theme_set(theme_light())
library(magrittr)
library(coretta2018itaegg)
library(brms)
library(posterior)
library(tidybayes)
library(marginaleffects)
library(ggdist)
library(mgcv)
library(tidygam)
library(HDInterval)
library(truncdist)
library(ggdist)

my_seed <- 9899

cols <- viridisLite::viridis(5)
cols[5] <- "#d95f02"
```

## Read data

```{r}
#| label: read-data

data("ita_egg")

ita_egg <- ita_egg |> 
  drop_na(f13, f23) |> 
  mutate(
  duration = v1_duration * 1000,
  vowel = as.factor(vowel),
  duration_z = as.vector(scale(duration)),
  duration_log = log(duration),
  duration_logz = as.vector(scale(log(duration))),
  speech_rate_log = log(speech_rate),
  speech_rate_logz = as.vector(scale(log(speech_rate_log))),
  f13_z = as.vector(scale(f13)),
  f23_z = as.vector(scale(f23)),
  speaker = as.factor(speaker),
  word_ipa = str_replace_all(word, "ch|c", "k"),
  previous_sound = str_sub(word_ipa, 1, 1),
  next_sound = str_sub(word_ipa, 3, 3)
)
contrasts(ita_egg$vowel) <- "contr.sum"
```

## Plotting

```{r}
#| label: vowel-plot-1

ita_egg %>%
  group_by(speaker) %>%
  mutate(
    f13_speaker_z = as.vector(scale(f13)),
    f23_speaker_z = as.vector(scale(f23))
  ) %>%
  ggplot(aes(f23_speaker_z, f13_speaker_z, colour = vowel)) +
  geom_point(alpha = 0.2) +
  stat_ellipse(type = "norm") +
  scale_x_reverse(position = "top") + scale_y_reverse(position = "right") +
  coord_fixed()
```

```{r}
#| label: vowel-plot-2

ita_egg %>%
  group_by(speaker) %>%
  mutate(
    f13_speaker_z = as.vector(scale(f13)),
    f23_speaker_z = as.vector(scale(f23))
  ) %>%
  ggplot(aes(f23_speaker_z, f13_speaker_z)) +
  geom_point(aes(colour = duration), alpha = 0.8) +
  stat_ellipse(aes(group = vowel), type = "norm") +
  scale_x_reverse(position = "top") + scale_y_reverse(position = "right") +
  coord_fixed()
```

```{r}
#| label: dur-f1-dens

ita_egg %>%
  ggplot(aes(f13_z, duration_z)) +
  geom_density_2d_filled()
```

```{r}
#| label: dur-place

ita_egg |> 
  ggplot(aes(vowel, duration)) +
  geom_jitter(width = 0.2) +
  facet_grid(rows = vars(next_sound), cols = vars(previous_sound))
```


```{r}
#| label: dur-f1

ita_egg %>%
  ggplot(aes(f13_z, duration_z, colour = vowel)) +
  geom_point(alpha = 0.2) +
  geom_smooth(method = "lm", formula = y ~ x)
```

## Linear modelling

### Prior predictive checks

The outcome `duration_logz` and predictor `f13_z` are z-scored and the intercept has been suppressed so that the indexing method is used for the `vowel` predictor instead of contrasts.

I am using relatively weakly informative priors.

```{r}
#| label: get-priors

bm_1_f <- bf(
  duration_logz ~ a + b*f13_z + c*speech_rate_logz,
  a ~ 0 + vowel + (0 + vowel | speaker),
  b ~ 0 + vowel + (0 + vowel | speaker),
  c ~ (1 | speaker),
  nl = TRUE
)

bm_1_get <- get_prior(
  bm_1_f,
  data = ita_egg,
  family = gaussian,
) |> as_tibble()
bm_1_get
```


```{r}
#| label: prior-check

priors <- c(
  prior(normal(0, 1), class = b, nlpar = a),
  prior(normal(0, 0.1), class = b, nlpar = b),
  prior(normal(0, 0.1), class = b, nlpar = c),
  prior(cauchy(0, 0.1), class = sigma),
  prior(lkj(2), class = cor),
  prior(cauchy(0, 0.1), class = sd, nlpar = a),
  prior(cauchy(0, 0.1), class = sd, nlpar = b),
  prior(cauchy(0, 0.1), class = sd, nlpar = c)
)

bm_1_priors <- brm(
  bm_1_f,
  family = gaussian,
  data = ita_egg,
  prior = priors,
  cores = 4,
  threads = threading(2),
  backend = "cmdstanr",
  sample_prior = "only",
  file = "data/cache/bm_1_priors",
)

bm_1_priors
```

```{r}
#| label: prior-plot

conditional_effects(bm_1_priors, "f13_z:vowel", spaghetti = TRUE, ndraws = 50)
conditional_effects(bm_1_priors, "speech_rate_logz", spaghetti = TRUE, ndraws = 50)
conditional_effects(bm_1_priors, "vowel")
```


### Model fit

```{r}
#| label: bm-1

bm_1 <- brm(
  bm_1_f,
  family = gaussian,
  data = ita_egg,
  prior = priors,
  cores = 4,
  threads = threading(2),
  backend = "cmdstanr",
  file = "data/cache/bm_1",
)
```

```{r}
#| label: bm-1-fixef
fixef(bm_1, probs = c(0.05, 0.95))
```


```{r bm-1-coef-table}
bm_1 %>%
  as_draws_df() %>%
  select(b_b_vowela:b_b_vowelu) %>%
  pivot_longer(b_b_vowela:b_b_vowelu) %>%
  group_by(name) %>%
  median_hdi() |> 
  knitr::kable(format = "latex") %>% cat(sep = "\n")
```

### Model plotting

```{r}
#| label: bm-1-cond

conditional_effects(bm_1, "f13_z:vowel", prob = 0.9)
```

```{r}
#| label: bm-1-cond-spag

conditional_effects(bm_1, "f13_z:vowel", spaghetti = TRUE, ndraws = 100, prob = 0.9)
```

We need to get the predicted draws to convert duration and F1 back to ms and hz. Note that duration was logged then scaled.

```{r}
#| label: bm-1-preds

seq_minmax <- function(x, by = 1) {
  seq(min(x), max(x), by = by)
}

bm_1_grid <- expand_grid(
  vowel = levels(ita_egg$vowel),
  f13_z = seq_minmax(ita_egg$f13_z, 0.5),
  speech_rate_logz = 0
)

bm_1_preds <- epred_draws(bm_1, newdata = bm_1_grid, re_formula = NA) %>%
  mutate(
    duration_log = .epred * sd(ita_egg$duration_log) + mean(ita_egg$duration_log),
    duration = exp(duration_log),
    f13 = f13_z * sd(ita_egg$f13) + mean(ita_egg$f13)
  )
```

Let's also calculate the mean F1 values for each vowel, to be added in the plot below.

```{r}
#| label: vmean

vmean_f13 <- ita_egg %>%
  group_by(vowel) %>%
  summarise(f13_mean = mean(f13))
vmean_f13z <- ita_egg %>%
  group_by(vowel) %>%
  summarise(f13z_mean = mean(f13_z))
```

We can now plot the model predictions in the original scale.

```{r}
#| label: bm1-pred-plot-1

bm_1_preds %>%
  group_by(vowel, f13) %>%
  summarise(
    duration_ms = median(duration),
    # Get the 90% CrI
    q0.05 = quantile(duration, probs = 0.05),
    q0.90 = quantile(duration, probs = 0.95),
    .groups = "drop"
  ) %>%
  ggplot(aes(f13, duration_ms)) +
  geom_ribbon(aes(ymin = q0.05, ymax = q0.90, fill = vowel), alpha = 0.25) +
  geom_line(aes(colour = vowel), linewidth = 1) +
  facet_wrap(~vowel) +
  scale_colour_viridis_d() +
  scale_fill_viridis_d()
```

```{r}
#| label: bm1-pred-plot-2

bm_1_preds %>%
  group_by(vowel, f13) %>%
  ggplot(aes(f13, duration)) +
  stat_lineribbon() +
  facet_wrap(~vowel) +
  scale_fill_brewer()
```

```{r}
#| label: bm1-pred-plot-ms-hz

bm_1_preds %>%
  mutate(
    vowel = str_replace(vowel, "o", "ɔ"),
    vowel = factor(vowel, levels = c("i", "u", "e", "ɔ", "a"))
  ) |> 
  group_by(vowel, f13) %>%
  ggplot(aes(f13, duration, fill = vowel)) +
  stat_ribbon(.width = 0.98, alpha = 0.2) +
  stat_ribbon(.width = 0.9, alpha = 0.4) +
  stat_lineribbon(.width = 0.6, alpha = 0.8) +
  geom_vline(data = vmean_f13 |>   mutate(
    vowel = str_replace(vowel, "o", "ɔ"),
    vowel = factor(vowel, levels = c("i", "u", "e", "ɔ", "a"))
  ), aes(xintercept = f13_mean, colour = vowel), linetype = "dashed") +
  geom_rug(data = ita_egg |>   mutate(
    vowel = str_replace(vowel, "o", "ɔ"),
    vowel = factor(vowel, levels = c("i", "u", "e", "ɔ", "a"))
  ), alpha = 0.1, length = unit(0.015, "npc"), aes(colour = vowel)) +
  facet_wrap(~vowel) +
  labs(
    x = "F1 (Hz)", y = "Duration (ms)"
  ) +
  scale_fill_manual(values = cols) +
  scale_color_manual(values = cols) +
  theme(legend.position = "none")

ggsave("img/bm1-pred-plot-ms-hz.png", width = 7, height = 5)
```

But let's also plot this in the standardised logged duration scale.

```{r}
#| label: bm1-pred-plot-4

bm_1_preds %>%
  group_by(vowel, f13) %>%
  ggplot(aes(f13_z, .epred, fill = vowel)) +
  stat_ribbon(.width = 0.98, alpha = 0.2) +
  stat_ribbon(.width = 0.9, alpha = 0.4) +
  stat_lineribbon(.width = 0.6, alpha = 0.8) +
  geom_vline(data = vmean_f13z, aes(xintercept = f13z_mean, colour = vowel)) +
  facet_wrap(~vowel) +
  scale_fill_viridis_d()
```

### Average predictions and comparisons

```{r}
#| label: bm-1-avg-pred

avg_comparisons(bm_1, variables = "f13_z", conf_level = 0.9)
```

```{r}
#| label: bm-1-comp-vow

avg_comparisons(bm_1, variables = "f13_z", by = "vowel", conf_level = 0.9)
```

```{r}
#| label: bm-1-comp

avg_predictions(bm_1, by = "vowel", conf_level = 0.9) %>%
  as_tibble() %>%
  mutate_if(
    is.numeric, function (x) {exp(x * sd(ita_egg$duration_log) + mean(ita_egg$duration_log))}
  )
```

### Group-level effects

```{r}
#| label: bm-1-ranef

bm_1_ranef <- bm_1 %>%
  gather_draws(r_speaker__c[subject,var])
```

```{r}
#| label: bm-1-ranef-f13-z

bm_1_ranef %>%
  ggplot(aes(y = reorder(subject, .value, median), x = .value)) +
  geom_vline(xintercept = 0) +
  stat_halfeye()
```


## Non-linear modelling

### F1

```{r}
#| label: gam-1

gam_1 <- bam(
  duration_logz ~
    vowel +
    s(f13_z) +
    s(f13_z, speaker, by = vowel, bs = "fs", m = 1) +
    s(speech_rate_logz) +
    s(speech_rate_logz, speaker, bs = "fs", m = 1),
  data = ita_egg
)
```

```{r}
#| label: gam-1-summ

summary(gam_1)
```


```{r}
#| label: gam-1-plot

vmean <- aggregate(ita_egg$f13_z, list(ita_egg$vowel), mean)
# fs_terms <- c("s(f13_z,speaker)")
fs_terms <- c("s(f13_z,speaker):vowela", "s(f13_z,speaker):vowele", "s(f13_z,speaker):voweli", "s(f13_z,speaker):vowelo", "s(f13_z,speaker):vowelu", "s(speech_rate_logz,speaker)")

predict_gam(gam_1, exclude_terms = fs_terms, length_out = 100, values = list(speech_rate_logz = 0)) %>%
  plot(series = "f13_z", comparison = "vowel") +
  geom_vline(data = vmean, aes(xintercept = x, colour = Group.1)) +
  geom_hline(yintercept = 0, linetype = "dashed") +
  facet_wrap(~vowel)
```

### BRM

```{r}
#| label: bms-1-priors

priors_s <- c(
  prior(normal(0, 1), class = b),
  prior(cauchy(0, 0.01), class = sigma),
  prior(cauchy(0, 1), class = sds)
)

bms_1_f <- bf(
  duration_logz ~
    0 + vowel +
    s(f13_z, k = 5) +
    s(f13_z, speaker, by = vowel, bs = "fs", m = 1) +
    s(speech_rate_logz, k = 5) +
    s(speech_rate_logz, speaker, bs = "fs", m = 1)
)

bms_1_priors <- brm(
  bms_1_f,
  family = gaussian,
  data = ita_egg,
  prior = priors_s,
  sample_prior = "only",
  cores = 4,
  threads = threading(2),
  backend = "cmdstanr",
  file = "data/cache/bms_1_priors",
  seed = my_seed
)
```

```{r}
#| label: bms-1-priors-plot

plot(conditional_smooths(bms_1_priors, ndraws = 100), ask = FALSE)
```

We specify `k = 5` based on the mgcv modelling above. Reducing `k` speeds up estimation (because there are less basis functions, hence less parameters to estimate).

The model takes about 4-5 hours to run on 8 cores.

```{r}
#| label: bms-1

bms_1 <- brm(
  bms_1_f,
  family = gaussian,
  data = ita_egg,
  prior = priors_s,
  cores = 4,
  threads = threading(2),
  # iter = 6000,
  # control = list(adapt_delta = 0.9999, max_treedepth = 15),
  # thin = 2,
  backend = "cmdstanr",
  file = "data/cache/bms_1",
  seed = my_seed
)
```

```{r}
#| label: bms-1-sum

summary(bms_1, prob = 0.9)
```

```{r bms-1-coef-table}
bms_1 %>%
  as_draws_df() %>%
  select(b_vowela:b_vowelu) %>%
  pivot_longer(b_vowela:b_vowelu) %>%
  group_by(name) %>%
  median_hdi() |> 
  knitr::kable(format = "latex") %>% cat(sep = "\n")
```


```{r}
#| label: bms-1-plot

plot(conditional_effects(bms_1, "f13_z:vowel"), plot = FALSE)[[1]] + facet_wrap(~vowel)
plot(conditional_effects(bms_1, "f13_z:vowel", spaghetti = TRUE, ndraws = 100), plot = FALSE)[[1]] + facet_wrap(~vowel)
```

Let's plot on the original scale.

```{r}
#| label: bms-1-preds

seq_minmax <- function(x, by = 1) {
  seq(min(x), max(x), by = by)
}

bms_1_grid <- expand_grid(
  vowel = levels(ita_egg$vowel),
  f13_z = seq_minmax(ita_egg$f13_z, 0.25),
  speech_rate_logz = 0,
  speaker = NA
)

bms_1_preds <- epred_draws(bms_1, newdata = bms_1_grid, re_formula = NA) %>%
  mutate(
    duration_log = .epred * sd(ita_egg$duration_log) + mean(ita_egg$duration_log),
    duration = exp(duration_log),
    f13 = f13_z * sd(ita_egg$f13) + mean(ita_egg$f13)
  )
```

```{r}
#| label: bms1-pred-plot-ms-hz

mean_pred_vdur <- round(mean(bms_1_preds_m$duration))

bms_1_preds %>%
  mutate(
    vowel = str_replace(vowel, "o", "ɔ"),
    vowel = factor(vowel, levels = c("i", "u", "e", "ɔ", "a"))
  ) |> 
  group_by(vowel, f13) %>%
  ggplot(aes(f13, duration, fill = vowel)) +
  geom_hline(yintercept = mean_pred_vdur, linetype = "dashed", colour = "red") +
  stat_ribbon(.width = 0.98, alpha = 0.2) +
  stat_ribbon(.width = 0.9, alpha = 0.4) +
  stat_lineribbon(.width = 0.6, alpha = 0.8) +
  geom_vline(data = vmean_f13 |>  mutate(
    vowel = str_replace(vowel, "o", "ɔ"),
    vowel = factor(vowel, levels = c("i", "u", "e", "ɔ", "a"))
  ), aes(xintercept = f13_mean, colour = vowel), linetype = "dashed") +
  geom_rug(data = ita_egg |> mutate(
    vowel = str_replace(vowel, "o", "ɔ"),
    vowel = factor(vowel, levels = c("i", "u", "e", "ɔ", "a"))
  ), alpha = 0.1, length = unit(0.015, "npc"), aes(colour = vowel)) +
  facet_wrap(~vowel) +
  labs(
    x = "F1 (Hz)", y = "Duration (ms)"
  ) +
  scale_fill_manual(values = cols) +
  scale_colour_manual(values = cols) +
  theme(legend.position = "none")

ggsave("img/bms1-pred-plot-ms-hz.png", width = 7, height = 5)
```


### F1 and F2

```{r}
#| label: gam-2

gam_2 <- bam(
  duration_logz ~
    vowel +
    s(f13_z, f23_z) +
    s(f13_z, f23_z, speaker, bs = "fs", m = 1),
  data = ita_egg
)
```

```{r}
#| label: gam-2-summ

summary(gam_2)
```

```{r}
#| label: gam-2-pred

gam_2_preds <- predict_gam(gam_2, length_out = 50, exclude_terms = "s(f13_z,f23_z,speaker)")
```

```{r}
#| label: gam-2-plot

vmeans <- ita_egg %>%
  group_by(vowel) %>%
  summarise(
    f13_z = mean(f13_z), f23_z = mean(f23_z)
  )

gam_2_preds %>%
  ggplot(aes(f23_z, f13_z)) +
  geom_raster(aes(fill = duration_logz), interpolate = TRUE) +
  geom_contour(aes(z = duration_logz), bins = 40, colour = "white", linewidth = 0.05) +
  geom_label(data = vmeans, aes(label = vowel), size = 5) +
  scale_x_reverse(position = "top") +
  scale_y_reverse(position = "right") +
  scale_fill_distiller(palette = "BuPu")
```


