---
title: "vow-height"
---

## Attach packages

```{r}
#| label: packages
#| message: false

library(tidyverse)
theme_set(theme_light())
library(magrittr)
library(coretta2018itaegg)
library(brms)
library(marginaleffects)
library(mgcv)
library(tidygam)
```

## Read data

```{r}
#| label: read-data

data("formants")

formants %<>% mutate(
  duration = duration * 1000,
  vowel = as.factor(label),
  duration_z = as.vector(scale(duration)),
  duration_logz = as.vector(scale(log(duration))),
  f13_z = as.vector(scale(f13)),
  f23_z = as.vector(scale(f23))
)
contrasts(formants$vowel) <- "contr.sum"
```

## Plotting

```{r}
#| label: dur-f1

formants %>%
  ggplot(aes(f13_z, duration_z, colour = vowel)) +
  geom_point(alpha = 0.25) +
  geom_smooth(method = "lm")
```

## Linear modelling

### Prior predictive checks

The outcome `duration_logz` and predictor `f13_z` are z-scored and `vowel` is sum coded so that `Intercept` is the grand mean.

I am using relatively weakly informative priors.

```{r}
#| label: prior-check

priors <- c(
  prior(normal(0, 1), class = Intercept),
  prior(normal(0, 1), class = b),
  prior(cauchy(0, 0.1), class = sigma),
  prior(lkj(2), class = cor),
  prior(cauchy(0, 0.1), class = sd)
)

bm_1_priors <- brm(
  duration_logz ~
    vowel * f13_z +
    (vowel * f13_z | speaker),
  family = gaussian,
  data = formants,
  prior = priors,
  cores = 4,
  threads = threading(2),
  backend = "cmdstanr",
  sample_prior = "only",
  file = "data/cache/bm_1_priors",
)
```

```{r}
#| label: prior-plot

conditional_effects(bm_1_priors, "f13_z:vowel")
conditional_effects(bm_1_priors, "vowel")
```


### Model fit

```{r}
#| label: bm_1

bm_1 <- brm(
  duration_logz ~
    vowel * f13_z +
    (vowel * f13_z | speaker),
  family = gaussian,
  data = formants,
  prior = priors,
  cores = 4,
  threads = threading(2),
  backend = "cmdstanr",
  file = "data/cache/bm_1",
)
```

```{r}
fixef(bm_1)
```

```{r}
conditional_effects(bm_1, "f13_z:vowel")
conditional_effects(bm_1, "f13_z:vowel", spaghetti = TRUE, ndraws = 100)
```

```{r}
avg_comparisons(bm_1, variables = "f13_z", by = "vowel")
```

## Non-linear modelling

```{r}
gam_1 <- bam(
  duration_logz ~ s(f13_z) + s(f13_z, as.factor(speaker), bs = "fs", m = 1),
  data = formants
)
```

```{r}
vmean <- aggregate(formants$f13_z, list(formants$vowel), mean)

predict_gam(gam_1, exclude_terms = "s(f13_z,as.factor(speaker))", length_out = 100) %>%
  plot(series = "f13_z") +
  geom_vline(data = vmean, aes(xintercept = x, colour = Group.1))
```

```{r}
gam_2 <- bam(
  duration_logz ~ s(f13_z, f23_z) + s(f13_z, f23_z, as.factor(speaker), bs = "fs", m = 1),
  data = formants
)
```


```{r}
plot(gam_2)
```

```{r}
predict_gam(gam_2, length_out = 50, exclude_terms = "s(f13_z,f23_z,as.factor(speaker))") %>%
  plot(series = c("f13_z", "f23_z"))
```

```{r}
gam_3 <- bam(
  duration_logz ~ s(f13_z) + s(f13_z, vowel, bs = "fs", m = 1) + s(f13_z, as.factor(speaker), bs = "fs", m = 1),
  data = formants
)
```

```{r}
predict_gam(gam_3, exclude_terms = "s(f13_z,as.factor(speaker))", length_out = 100) %>%
  plot(series = "f13_z", comparison = "vowel") +
  geom_vline(data = vmean, aes(xintercept = x, colour = Group.1)) +
  facet_wrap(~ vowel)
```

```{r}
gam_4 <- bam(
  duration_logz ~
    vowel +
    s(f13_z) +
    s(f13_z, as.factor(speaker), bs = "fs", m = 1),
  data = formants
)
```

```{r}
predict_gam(gam_4, exclude_terms = "s(f13_z,as.factor(speaker))", length_out = 100) %>%
  plot(series = "f13_z", comparison = "vowel") +
  geom_vline(data = vmean, aes(xintercept = x, colour = Group.1)) +
  geom_hline(yintercept = 0) +
  facet_wrap(~ vowel)
```

```{r}
priors_s <- c(
  prior(normal(0, 1), class = Intercept),
  prior(normal(0, 1), class = b),
  prior(cauchy(0, 0.1), class = sigma),
  prior(lkj(2), class = cor),
  prior(cauchy(0, 0.1), class = sd),
  prior(cauchy(0, 0.1), class = sds)
)
```


```{r}
bm_s1 <- brm(
  duration_logz ~
    vowel +
    s(f13_z, k = 5) +
    s(f13_z, speaker, bs = "fs", m = 1) +
    (vowel | speaker),
  family = gaussian,
  data = formants,
  prior = priors_s,
  cores = 4,
  threads = threading(2),
  backend = "cmdstanr",
  file = "data/cache/bm_s1",
)
```

